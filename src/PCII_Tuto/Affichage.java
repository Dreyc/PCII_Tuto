package PCII_Tuto;import javax.swing.*;import java.awt.*;public class Affichage extends JPanel {    //Definition de l'Etat que nous allons utiliser    public Etat etat;    /** Constante : Largeur de la fenetre **/    public static final int WIDTH_WINDOW = 600;    /** Constante : Hauteur de la fenetre **/    public static final int HEIGHT_WINDOW = 400;    /** Constante : Largeur de l'ovale **/    public static int LARGEUR_OVALE = 20;    /** Constante : Hauteur de l'ovale **/    public static int HAUTEUR_OVALE = 60;    /** Constante : Coordonn√©e X du centre de l'ovale **/    public static int CENTRE_X_OVALE = 50;    //Initialisation d'un nouveau JFrame    JFrame test = new JFrame("Test Dessin");    /**     * Initialise un affichage, cree une fenetre ainsi que tous ses parametres et cree le MouseListener     * @param e un etat     */    public Affichage( Etat e) {        this.etat = e;        (new Affichage2(this, this.etat)).start();        //Initialise la valeur par defaut du JFrame a EXIT_ON_CLOSE        test.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        //Defini la taille de notre fenetre        setPreferredSize(new Dimension(WIDTH_WINDOW, HEIGHT_WINDOW));        //Ajoute un composant au JFrame, ici l'etat        test.add( this);        //Initialise le MouseListener        test.addMouseListener(new Control(this.etat, this));        //Met toutes les frames a la bonne taille        test.pack();        //Rend visible le JFrame        test.setVisible(true);    }    /**     * Affiche une fenetre contextuelle de fin de partie avec le score et ferme le jeu     * lorsque l'on ferme la fenetre     */    public void affichageFinPartie() {        //Cree une fenetre de dialogue qui affiche le score et qui empeche de cliquer sur le jeu tant qu'elle est visible        JOptionPane.showMessageDialog(test,"Votre Score : " + etat.parcours.getScore(), "FIN DE PARTIE", JOptionPane.PLAIN_MESSAGE);        //Exit le jeu        System.exit(0);    }    /**     * Dessine l'ovale dans la fenetre et nettoie l'affichage avant de le dessiner     * @param g un graphic     */    @Override    public void paint(Graphics g) {        //Nettoie l'affichage        g.clearRect(0, 0, WIDTH_WINDOW, HEIGHT_WINDOW);        //Nettoie l'affichage        super.paint(g);        //Dessine l'ovale        g.drawOval(CENTRE_X_OVALE, etat.get_hauteur(), LARGEUR_OVALE, HAUTEUR_OVALE);        //Initialise le tableau de point qui constituent le parcours        Point[] points = etat.getParcours();        //Dessine une ligne avec un couple de points        g.setColor(Color.red);        for (int i = 1; i < points.length; i++) {            Point previousPoint = points[i-1];            Point currentPoint = points[i];            g.drawLine(previousPoint.x, previousPoint.y, currentPoint.x, currentPoint.y);        }        //Affiche le score en noir en position (30,30)        g.setColor(Color.BLACK);        g.drawString("Score : " + (etat.parcours.getScore())/2, 30, 30 );    }    /**     * Getter de la hauteur de l'ovale     * @return un int     */    public static int getHauteurOvale() {        return HAUTEUR_OVALE;    }    /**     * Getter de la coordonnee X du centre de l'ovale     * @return une int     */    public static int getCentreXOvale() {        return CENTRE_X_OVALE;    }}